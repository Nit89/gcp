# name: 'Build and Deploy to Cloud Run'

# on:
#   push:
#     branches:
#       - "main"

# env:
#   PROJECT_ID: eco-hangar-381618 # TODO: update to your Google Cloud project ID
#   GAR_NAME : nitesh
#   GAR_LOCATION: us-central1
#   REPOSITORY: nitesh
#   IMAGE: main
#   REGION: us-central1 
#   SERVICE: sample
# jobs:
#   deploy:
#     runs-on: 'ubuntu-latest'

#     permissions:
#       contents: 'read'
#       id-token: 'write'

#     steps:
#       - name: 'Checkout'
#         uses: 'actions/checkout@v4' 


#       - name: Set up GCP authentication
#         id: auth
#         uses: 'google-github-actions/auth@v2'
#         with: 
#          credentials_json: ${{secrets.GCP_SA_KEY}}

#       - name: 'Docker Auth'
#         run: | 
#           gcloud auth configure-docker "${{env.GAR_LOCATION}}-docker.pkg.dev"

#       - name: Build and Push Container
#         run: |
#           docker build -t "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA" ./
#           docker push "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA"



#       - name: Deploy to Cloud Run
#         run: |
#           gcloud run deploy ${{ env.SERVICE }} \
#             --image "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}:${{ github.sha }}" \
#             --region ${{ env.REGION }} \
#             --platform managed \
#             --allow-unauthenticated
      
#       - name:  Show Output
#         run: echo ${{ steps.deploy.outputs.url}}



        

     







# name: 'Terraform'
# on:
#   push:
#     branches: [ "main" ]
#   pull_request:

# permissions:
#   contents: read

# jobs:
#   terraform:
#     name: 'Terraform'
#     runs-on: ubuntu-latest

#     # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
#     defaults:
#       run:
#         shell: bash

#     steps:
#     # Checkout the repository to the GitHub Actions runner
#     - name: Checkout
#       uses: actions/checkout@v4

#     # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v1
#       with:
#         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

#     # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
#     - name: Terraform Init
#       run: terraform init -migrate-state

#     # Checks that all Terraform configuration files adhere to a canonical format
#     # - name: Terraform Format
#     #   run: terraform fmt -check
#     #   env:
#     #        GOOGLE_CREDENTIALS: ${{secrets.GCP_SA_KEY}}
          

#     # Generates an execution plan for Terraform
#     - name: Terraform Plan
#       run: terraform plan -input=false
#       env:
#            GOOGLE_CREDENTIALS: ${{secrets.GCP_SA_KEY}}

#       # On push to "main", build or change infrastructure according to Terraform configuration files
#       # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
#     - name: Terraform Apply
#       run: terraform apply -auto-approve -input=false
#       env:
#            GOOGLE_CREDENTIALS: ${{secrets.GCP_SA_KEY}}



